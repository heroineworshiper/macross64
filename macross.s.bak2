.include        "cbm_kernal.inc"

.segment "DATA"


; from kernal source
cia1	=$dc00                  ;device1 6526 (page1 irq)
d1pra	=cia1+0
colm	=d1pra                  ;keyboard matrix
d1prb	=cia1+1
rows	=d1prb                  ;keyboard matrix
d1ddra	=cia1+2
d1ddrb	=cia1+3
d1t1l	=cia1+4
d1t1h	=cia1+5
d1t2l	=cia1+6
d1t2h	=cia1+7
d1tod1	=cia1+8
d1tods	=cia1+9
d1todm	=cia1+10
d1todh	=cia1+11
d1sdr	=cia1+12
d1icr	=cia1+13
d1cra	=cia1+14
d1crb	=cia1+15

cia2	=$dd00                  ;device2 6526 (page2 nmi)
d2pra	=cia2+0
d2prb	=cia2+1
d2ddra	=cia2+2
d2ddrb	=cia2+3
d2t1l	=cia2+4
d2t1h	=cia2+5
d2t2l	=cia2+6
d2t2h	=cia2+7
d2tod1	=cia2+8
d2tods	=cia2+9
d2todm	=cia2+10
d2todh	=cia2+11
d2sdr	=cia2+12
d2icr	=cia2+13
d2cra	=cia2+14
d2crb	=cia2+15

temp1: .res 1
temp2: .res 1
temp3: .res 1
command_offset: .res 1
sector_offset: .res 1
current_command: .res 1

; times
profile1: .res 2
profile2: .res 2
profile3: .res 2
profile4: .res 2

COMMAND_SIZE = 12

; sector buffer for testing
SECTOR_DST = $c000

.include "scrollvars.inc"



.include "common.inc"

; secondary & logical addresses for the world drive
CONTROL = 15
WORLD_DRIVE = 9
DATA = 2

.macro SET_IO_STATE func
    SET_LITERAL16 io_state + 1, func
.endmacro

.macro SELECT_CONTROL
    lda #WORLD_DRIVE ; write to the command channel
    jsr LISTEN
    lda #(CONTROL | $60) ; secondary address needs to be ored with 0x60
    jsr SECOND
.endmacro

.macro SELECT_DATA
    lda #WORLD_DRIVE ; read from the data channel
    jsr TALK
    lda #(DATA | $60) ; secondary address needs to be ored with 0x60
    jsr TKSA
.endmacro

.segment	"CODE"



mane:
    INIT_DEBUG

; print something
    PRINT_TEXT welcome

; open data channel
    lda #DATA ; logical number
    ldx #WORLD_DRIVE    ; drive number
    ldy #DATA ; secondary address
    jsr SETLFS
    lda #1
    ldx #<data_name
    ldy #>data_name
    jsr SETNAM
    jsr OPEN

; open control channel
    lda #CONTROL ; logical number
    ldx #WORLD_DRIVE       ; drive number
    ldy #CONTROL ; secondary address
    jsr SETLFS
    lda #0
    ldx #0
    ldy #0
    jsr SETNAM
    jsr OPEN

    jsr init_graphics

; self modifying code
    SET_IO_STATE io_command
    lda #00
    sta current_command

loop:
    jsr scroll_left
    jsr flip_page
    jsr update_pattern
;    jsr io_state

    jmp loop

clkhi:	;set clock line high (inverted)
	lda d2pra
	and #$ff-$10
	sta d2pra
	rts

clklo:	;set clock line low  (inverted)
	lda d2pra
	ora #$10
	sta d2pra
	rts

datahi:	;set data line high (inverted)
	lda d2pra
	and #$ff-$20
	sta d2pra
	rts

debpia:	lda d2pra       ;debounce the pia
	cmp d2pra
	bne debpia
	asl a           ;shift the data bit into the carry...
	rts             ;...and the clock into neg flag

w1ms:	;delay 1ms using loop
	txa             ;save .x
	ldx #200-16     ;1000us-(1000/500*8=#40us holds)
w1ms1:	dex             ;5us loop
	bne w1ms1
	tax             ;restore .x
	rts

io_state:
    jmp io_idle


io_idle:
    rts

io_command:
    PRINT_TEXT sending_command



    SELECT_CONTROL
    SET_LITERAL8 command_offset, 0
    SET_IO_STATE io_command2

; set the command
    lda current_command
    cmp #0
    bne set_command2
        SET_LITERAL16 io_command_mod + 1, load_command1
        inc current_command
        rts
set_command2:
    cmp #1
    bne set_command3
        SET_LITERAL16 io_command_mod + 1, load_command2
        inc current_command
        rts
set_command3:
    cmp #2
    bne set_command4
        SET_LITERAL16 io_command_mod + 1, load_command3
        inc current_command
        rts
set_command4:
    SET_LITERAL16 io_command_mod + 1, load_command4
    SET_LITERAL8 current_command, 0
    rts

io_command2:
    ldx command_offset
io_command_mod:
    lda $ffff,x
    jsr CIOUT
    inc command_offset
    lda command_offset
    cmp #COMMAND_SIZE
    beq io_command3
        rts
io_command3:
    SET_IO_STATE io_command_done
    rts


io_command_done:
    jsr UNLSN ; execute the command

    PRINT_TEXT reading1
;    lda #00 ; reset jiffy clock
;    sta $A2
;    SET_IO_STATE io_delay
;    SET_IO_STATE io_start_read

    INIT_PROFILER

; begin the TALK command
    lda d2pra       ;assert attention
	ora #$08
	sta d2pra

    jsr clklo       ;set clock line low
	jsr datahi      ;make sure data is released
	jsr w1ms        ;delay 1 ms
	jsr clkhi       ;clock line high
    SET_IO_STATE io_poll_talk
    rts


; delay for sector read
;io_delay:
;    lda $A2 ; test for clock > delay time
;    sbc #15
;    bpl io_delay2
;        rts
;io_delay2:
;    SET_IO_STATE io_start_read
;    rts

; wait for read to finish.  Have to poll this fast enough to catch it
io_poll_talk:
    jsr debpia      ;wait for data to go high.  This is the long delay
    bcs io_poll_talk2
        rts

io_poll_talk2:
;    jsr debpia      ;wait for data to go low
;	bcs io_poll_talk2


	lda d2pra
	and #$ff-$08
	sta d2pra       ;release attention
	jsr w1ms    ;delay 1 ms to get the damn thing to work

    GET_TIME profile1 ; time spent waiting for TALK
    SET_IO_STATE io_start_read
    rts


io_start_read:
    SET_LITERAL8 sector_offset, 0


;    lda #'x'
;    jsr CIOUT
;    lda #$0a
;    jsr CIOUT

    SELECT_DATA

    GET_TIME profile2 ; time spent waiting for TALK

;    SET_IO_STATE io_poll
    SET_IO_STATE io_read
    rts

;io_poll:
; release clock line
;	lda d2pra
;	and #$ff-$10 ; bit 4 (clock out) to 0
;	sta d2pra
;    SET_IO_STATE io_poll2 ; set for later

;io_poll2:
;    lda d2pra ; load clock
;    cmp d2pra ; debounce
;    bne io_poll2
;    asl a ; move data (bit 7) into carry & clock (bit 6) into N flag (sign bit)
;    bmi io_read ; clock high if ready (N == 1)
;        rts


io_read:
    lda sector_offset
    bne io_read_2nd
        GET_TIME profile3 ; time spent waiting for 1st byte
io_read_2nd:

    jsr ACPTR ; read a character from the drive
    ldx sector_offset
    sta SECTOR_DST,x
    inc sector_offset
    beq io_read2
;        SET_IO_STATE io_poll
        rts
io_read2: ; end of sector
    SET_IO_STATE io_read_done
    rts

io_read_done:
; print profiling data
    PRINT_TEXT time1
    PRINT_HEX16 profile1
    lda #' '
    jsr CIOUT
    PRINT_HEX16 profile2
    lda #' '
    jsr CIOUT
    PRINT_HEX16 profile3
    lda #$0a
    jsr CIOUT

; next sector read
    SET_IO_STATE io_command
;    PRINT_TEXT printing
;    SET_IO_STATE io_print
    rts

io_print:
    SELECT_PRINTER
    SET_IO_STATE io_print2
    rts

io_print2:
    ldx sector_offset
    lda SECTOR_DST,x
    tay
    jsr print_hex8
    SET_IO_STATE io_print3
    rts

io_print3:
    lda #' '
    jsr CIOUT
    SET_IO_STATE io_print2
    inc sector_offset
    beq io_print4
        rts
io_print4:
    SET_IO_STATE io_print5
    rts

io_print5:
    lda #$0a
    jsr CIOUT
    SET_IO_STATE io_print_done
    rts

io_print_done:
;    jsr UNLSN
    SET_IO_STATE io_command
    rts

.include "common.inc"
.include "scroll.inc"



welcome:
    .byte "welcome to macross64"
    .byte $0a, $00    ; null terminator for the message

sending_command:
    .byte "sending_command"
    .byte $0a, $00    ; null terminator for the message
reading1:
    .byte "reading1"
    .byte $0a, $00    ; null terminator for the message

reading2:
    .byte "reading2"
    .byte $0a, $00    ; null terminator for the message

reading3:
    .byte "reading3"
    .byte $0a, $00    ; null terminator for the message
time1:
    .byte "time1: "
    .byte $00    ; null terminator for the message
time2:
    .byte "time2: "
    .byte $00    ; null terminator for the message
time3:
    .byte "time3: "
    .byte $00    ; null terminator for the message
printing:
    .byte "printing"
    .byte $0a, $00    ; null terminator for the message

data_name:
    .byte "#"

load_command1:
    .byte "u1 2 0  1  0"
load_command2:
    .byte "u1 2 0  1  1"
load_command3:
    .byte "u1 2 0  1  2"
load_command4:
    .byte "u1 2 0  1  3"


